This procedure needs to be streamlined with a script.

The idea is that there's an entry for each webapp user in
public.users, and a corresponding PostrgeSQL user for audit
purposes.

During development, we're using password-based authentication against
the password stored (as a SSHA-1 salted hash) in public.users.  For
web access, this might be replaced by Sanger SSO, but we'll probably
keep the basic auth functionality for REST clients.

Create the salted hash of the user's password:

perl -MCrypt::SaltedHash -le 'my $csh = Crypt::SaltedHash->new(algorithm=>"SHA-1"); $csh->add("XXXXXXXXXXXXX"); print $csh->generate'

This produces a string beginning '{SSHA}' that is used below.

Log in to the HTGT PostrgeSQL cluster:

psql --host pgsrv5 --port 5437 --dbname lims2_process_test

Create a PostgreSQL role for the user:

lims2_process_test=> set role htgt_dba;
lims2_process_test=# create role "htgt-qc" inherit nologin in role lims2_process_test_rw;

Grant the webapp access to this role:

lims2_process_test=# grant "htgt-qc" to lims2_process_test_webapp;

Create a LIMS2 user with read/write permissions:

lims2_process_test=# set role lims2_process_test_admin;
lims2_process_test=> begin;
lims2_process_test=> insert into users (user_name, password) values( 'htgt-qc', '{SSHA}XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' );
lims2_process_test=> insert into user_role (user_id, role_id) select user_id, role_id from users, roles where user_name = 'htgt-qc' and role_name in ( 'edit', 'read' );
lims2_process_test=> commit;

